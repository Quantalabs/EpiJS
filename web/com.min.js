class Virus{constructor(rnaught,u,a=0,d=0){this.rnaught=rnaught,this.u=u,this.a=a,this.d=d}}class Community{constructor(pop,i,s){this.pop=pop,this.i=i,this.s=s,this.r=pop-(i+s)}sir(disease,time){let data={datasets:[{data:[this.s],label:"Suseptible"},{data:[this.i],label:"Infected"},{data:[this.r],label:"Recovered"}]};for(let x=0;x<time;x++)data.datasets[0].data.push(data.datasets[0].data[x]-disease.rnaught*disease.u*data.datasets[0].data[x]*data.datasets[1].data[x]/this.pop),data.datasets[1].data.push(data.datasets[1].data[x]+disease.rnaught*disease.u*data.datasets[0].data[x]*data.datasets[1].data[x]/this.pop-disease.u*data.datasets[1].data[x]),data.datasets[2].data.push(data.datasets[2].data[x]+disease.u*data.datasets[1].data[x]);return data}seir(disease,time){let data={datasets:[{data:[this.s],label:"Suseptible"},{data:[this.i],label:"Exposed"},{data:[0],label:"Infected"},{data:[this.r],label:"Recovered"}]};for(let x=0;x<time;x++)data.datasets[0].data.push(data.datasets[0].data[x]-disease.rnaught*disease.u*data.datasets[0].data[x]*data.datasets[1].data[x]/this.pop),data.datasets[1].data.push(data.datasets[1].data[x]+disease.rnaught*disease.u*data.datasets[0].data[x]*data.datasets[1].data[x]/this.pop-disease.a*data.datasets[1].data[x]),data.datasets[2].data.push(data.datasets[2].data[x]+disease.a*data.datasets[1].data[x]-disease.u*data.datasets[2].data[x]),data.datasets[3].data.push(data.datasets[3].data[x]+disease.u*data.datasets[2].data[x]);return data}seird(disease,time){let data={datasets:[{data:[this.s],label:"Suseptible"},{data:[this.i],label:"Exposed"},{data:[0],label:"Infected"},{data:[this.r],label:"Recovered"},{data:[0],label:"Dead"}]};for(let x=0;x<time;x++)data.datasets[0].data.push(data.datasets[0].data[x]-disease.rnaught*disease.u*data.datasets[0].data[x]*data.datasets[1].data[x]/this.pop),data.datasets[1].data.push(data.datasets[1].data[x]+disease.rnaught*disease.u*data.datasets[0].data[x]*data.datasets[1].data[x]/this.pop-disease.a*data.datasets[1].data[x]),data.datasets[2].data.push(data.datasets[2].data[x]+disease.a*data.datasets[1].data[x]-disease.u*data.datasets[2].data[x]-disease.d*data.datasets[2].data[x]),data.datasets[3].data.push(data.datasets[3].data[x]+disease.u*data.datasets[2].data[x]),data.datasets[4].data.push(data.datasets[4].data[x]+disease.d*data.datasets[2].data[x]);return data}custom(compartments,time,virus,extrakey={}){key=Object.assign({S:this.s,I:this.i,R:this.r,rn:virus.rnaught,u:virus.u,a:virus.a,d:virus.d,p:this.pop},extrakey);let data={datasets:[]};for(let x=0;x<compartments.length;x++)data.datasets.push({data:[],label:compartments[x].id});for(let x=0;x<compartments.length;x++)for(let y=0;y<time;y++)data.datasets[x].data.push(compartments[x][0].get_data(y)),key[compartments[x][1]]=compartments[x][0].get_data(y);return data}}function compare(c,model1,model2,m1name,m2name,days){let data={labels:[],datasets:[]},m1len=model1.datasets.length,m2len=model2.datasets.length;for(var x=0;x<days;x++)data.labels.push("Day "+(x+1).toString());for(var y=0;y<m1len;y++)data.datasets[y]={},data.datasets[y].data=model1.datasets[y].data,data.datasets[y].label=model1.datasets[y].label+" ("+m1name+")",data.datasets[y].borderColor="#"+Math.floor(16777215*Math.random()).toString(16);for(var z=m1len;z<m2len+m1len;z++)data.datasets[z]={},data.datasets[z].data=model2.datasets[z-m1len].data,data.datasets[z].label=model2.datasets[z-m1len].label+" ("+m2name+")",data.datasets[z].borderColor="#"+Math.floor(16777215*Math.random()).toString(16);let compareChart=new Chart(c,{type:"line",data:data,options:{title:{display:!0,text:"Total Cases"}}})}